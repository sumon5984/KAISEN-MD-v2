const { plugin, isAdmin, isBotAdmin } = require('../lib');
const { getGroupMeta } = require('../lib/groupCache'); // Add this file separately below

plugin({
  pattern: 'tagall ?(.*)',
  type: 'group',
  fromMe: true, // false = allow group admins too
  onlyGroup: true,
  desc: 'Tag all group members with custom style',
}, async (m, text) => {
  try {
    const conn = m.client;
    const from = m.from;

    // Use safe metadata cache
    const groupInfo = await getGroupMeta(conn, from);
    if (!groupInfo) return m.reply("‚ùå Failed to fetch group information.");

    const participants = groupInfo.participants;
    const groupName = groupInfo.subject || "Unknown Group";
    const totalMembers = participants?.length || 0;
    if (totalMembers === 0) return m.reply("‚ùå No members found in this group.");

    if (!(await isAdmin(m))) return m.reply('‚ùå You must be an admin to use this.');
    if (!(await isBotAdmin(m))) return m.reply('‚ùå I must be an admin to tag everyone.');

    // Emojis list and random picker
    const emojis = ['‚ö°', '‚ú®', 'üéñÔ∏è', 'üíé', 'üî±', 'üíó', '‚ù§‚Äçü©π', 'üëª', 'üåü', 'ü™Ñ', 'üéã', 'ü™º', 'üçø', 'üëÄ', 'üëë', 'ü¶ã', 'üêã', 'üåª', 'üå∏', 'üî•', 'üçâ', 'üçß', 'üç®', 'üç¶', 'üßÉ', 'ü™Ä', 'üéæ', 'ü™á', 'üé≤', 'üé°', 'üß∏', 'üéÄ', 'üéà', 'ü©µ', '‚ô•Ô∏è', 'üö©', 'üè≥Ô∏è‚Äçüåà', 'üî™', 'üéè', 'ü´ê', 'üçì', 'üçá', 'üêç', 'ü™ª', 'ü™∏', 'üíÄ'];
    const getEmoji = () => emojis[Math.floor(Math.random() * emojis.length)];

    // Get message after command
    const msgText = text?.trim() || "ATTENTION EVERYONE";

    // Compose message
    let teks = `*‚ñ¢ GROUP : ${groupName}*\n*‚ñ¢ MEMBERS : ${totalMembers}*\n*‚ñ¢ MESSAGE : ${msgText}*\n\n*‚ï≠‚îà‚îÄ„Äå \`…¶‡πÄ Œ±‚Ñì‚Ñì ∆í…æ‡πÄŒµ…≥‚àÇ‡∏£ ü•∞\` „Äç‚îà‚ùç*\n`;

    for (const mem of participants) {
      if (!mem.id) continue;
      teks += `*‚îÇ${getEmoji()}* @${mem.id.split('@')[0]}\n`;
    }

    teks += '*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç*\n';

    const mentions = participants.map(p => p.id);

    await conn.sendMessage(from, {
      text: teks,
      mentions
    }, { quoted: m });

  } catch (err) {
    console.error('tagall error:', err);
    m.reply('‚ùå An error occurred while tagging members.');
  }
});